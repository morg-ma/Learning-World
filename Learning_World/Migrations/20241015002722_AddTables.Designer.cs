// <auto-generated />
using System;
using Learning_World.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Learning_World.Migrations
{
    [DbContext(typeof(ElearningPlatformContext))]
    [Migration("20241015002722_AddTables")]
    partial class AddTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseCategory", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.HasKey("CourseId", "CategoryId")
                        .HasName("PK__CourseCa__68BDE22500306A5E");

                    b.HasIndex("CategoryId");

                    b.ToTable("CourseCategories", (string)null);
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CourseId", "UserId")
                        .HasName("PK__CourseIn__1855FD4D7825CFB5");

                    b.HasIndex("UserId");

                    b.ToTable("CourseInstructors", (string)null);
                });

            modelBuilder.Entity("Learning_World.Models.AdminLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.HasKey("LogId")
                        .HasName("PK__AdminLog__5E5499A8812D5CFC");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminLogs");
                });

            modelBuilder.Entity("Learning_World.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__19093A2B74F24E96");

                    b.HasIndex(new[] { "CategoryName" }, "UQ__Categori__8517B2E0FDEADC86")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Learning_World.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CertificateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("IssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CertificateId")
                        .HasName("PK__Certific__BBF8A7E110A3059F");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Learning_World.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MaxEnrollment")
                        .HasColumnType("int");

                    b.Property<string>("PublicationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__C92D7187A258A338");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Learning_World.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("EnrollmentId")
                        .HasName("PK__Enrollme__7F6877FB0DFF4221");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Learning_World.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int?>("LessonTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LessonTypeID");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<int>("OrderInModule")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LessonId")
                        .HasName("PK__Lessons__B084ACB0A31A6376");

                    b.HasIndex("LessonTypeId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Learning_World.Models.LessonQuiz", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.HasKey("LessonId")
                        .HasName("PK__LessonQu__B084ACB0C53F76A0");

                    b.ToTable("LessonQuizzes");
                });

            modelBuilder.Entity("Learning_World.Models.LessonText", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("LessonId")
                        .HasName("PK__LessonTe__B084ACB0DF089528");

                    b.ToTable("LessonTexts");
                });

            modelBuilder.Entity("Learning_World.Models.LessonType", b =>
                {
                    b.Property<int>("LessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LessonTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LessonTypeId")
                        .HasName("PK__LessonTy__D7FA802E98E37A50");

                    b.HasIndex(new[] { "TypeName" }, "UQ__LessonTy__D4E7DFA87562B604")
                        .IsUnique();

                    b.ToTable("LessonTypes");
                });

            modelBuilder.Entity("Learning_World.Models.LessonVideo", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("VideoURL");

                    b.HasKey("LessonId")
                        .HasName("PK__LessonVi__B084ACB022F26045");

                    b.ToTable("LessonVideos");
                });

            modelBuilder.Entity("Learning_World.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("OrderInCourse")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ModuleId")
                        .HasName("PK__Modules__2B7477876AB6520C");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Learning_World.Models.Progress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("CompletionStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ProgressId")
                        .HasName("PK__Progress__BAE29C85D69AC3BD");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Progresses");
                });

            modelBuilder.Entity("Learning_World.Models.QuizAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.HasKey("AnswerId")
                        .HasName("PK__QuizAnsw__D48250247DA5BAE7");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizAnswers");
                });

            modelBuilder.Entity("Learning_World.Models.QuizQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int?>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("QuestionId")
                        .HasName("PK__QuizQues__0DC06F8C6623E068");

                    b.HasIndex("LessonId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("Learning_World.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3A453B49CD");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__8A2B61607E447F19")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Learning_World.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4B5371056C");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Learning_World.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC8F4E8754");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D1053449025D91")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserRole__AF27604F5A56D66B");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("CourseCategory", b =>
                {
                    b.HasOne("Learning_World.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseCat__Categ__35BCFE0A");

                    b.HasOne("Learning_World.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseCat__Cours__34C8D9D1");
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.HasOne("Learning_World.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseIns__Cours__38996AB5");

                    b.HasOne("Learning_World.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseIns__UserI__398D8EEE");
                });

            modelBuilder.Entity("Learning_World.Models.AdminLog", b =>
                {
                    b.HasOne("Learning_World.Models.User", "Admin")
                        .WithMany("AdminLogs")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK__AdminLogs__Admin__68487DD7");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Learning_World.Models.Certificate", b =>
                {
                    b.HasOne("Learning_World.Models.Course", "Course")
                        .WithMany("Certificates")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Certifica__Cours__6477ECF3");

                    b.HasOne("Learning_World.Models.User", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Certifica__UserI__6383C8BA");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning_World.Models.Enrollment", b =>
                {
                    b.HasOne("Learning_World.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Enrollmen__Cours__5629CD9C");

                    b.HasOne("Learning_World.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Enrollmen__UserI__5535A963");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning_World.Models.Lesson", b =>
                {
                    b.HasOne("Learning_World.Models.LessonType", "LessonType")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonTypeId")
                        .HasConstraintName("FK__Lessons__LessonT__4316F928");

                    b.HasOne("Learning_World.Models.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK__Lessons__ModuleI__4222D4EF");

                    b.Navigation("LessonType");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Learning_World.Models.LessonQuiz", b =>
                {
                    b.HasOne("Learning_World.Models.Lesson", "Lesson")
                        .WithOne("LessonQuiz")
                        .HasForeignKey("Learning_World.Models.LessonQuiz", "LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonQui__Lesso__4BAC3F29");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Learning_World.Models.LessonText", b =>
                {
                    b.HasOne("Learning_World.Models.Lesson", "Lesson")
                        .WithOne("LessonText")
                        .HasForeignKey("Learning_World.Models.LessonText", "LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonTex__Lesso__48CFD27E");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Learning_World.Models.LessonVideo", b =>
                {
                    b.HasOne("Learning_World.Models.Lesson", "Lesson")
                        .WithOne("LessonVideo")
                        .HasForeignKey("Learning_World.Models.LessonVideo", "LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonVid__Lesso__45F365D3");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Learning_World.Models.Module", b =>
                {
                    b.HasOne("Learning_World.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Modules__CourseI__3C69FB99");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Learning_World.Models.Progress", b =>
                {
                    b.HasOne("Learning_World.Models.Lesson", "Lesson")
                        .WithMany("Progresses")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK__Progresse__Lesso__5AEE82B9");

                    b.HasOne("Learning_World.Models.User", "User")
                        .WithMany("Progresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Progresse__UserI__59FA5E80");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning_World.Models.QuizAnswer", b =>
                {
                    b.HasOne("Learning_World.Models.QuizQuestion", "Question")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__QuizAnswe__Quest__5165187F");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Learning_World.Models.QuizQuestion", b =>
                {
                    b.HasOne("Learning_World.Models.LessonQuiz", "Lesson")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK__QuizQuest__Lesso__4E88ABD4");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Learning_World.Models.Transaction", b =>
                {
                    b.HasOne("Learning_World.Models.Course", "Course")
                        .WithMany("Transactions")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Transacti__Cours__5FB337D6");

                    b.HasOne("Learning_World.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Transacti__UserI__5EBF139D");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Learning_World.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__RoleI__2B3F6F97");

                    b.HasOne("Learning_World.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__UserI__2A4B4B5E");
                });

            modelBuilder.Entity("Learning_World.Models.Course", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Enrollments");

                    b.Navigation("Modules");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Learning_World.Models.Lesson", b =>
                {
                    b.Navigation("LessonQuiz");

                    b.Navigation("LessonText");

                    b.Navigation("LessonVideo");

                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("Learning_World.Models.LessonQuiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("Learning_World.Models.LessonType", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Learning_World.Models.Module", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Learning_World.Models.QuizQuestion", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("Learning_World.Models.User", b =>
                {
                    b.Navigation("AdminLogs");

                    b.Navigation("Certificates");

                    b.Navigation("Enrollments");

                    b.Navigation("Progresses");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
